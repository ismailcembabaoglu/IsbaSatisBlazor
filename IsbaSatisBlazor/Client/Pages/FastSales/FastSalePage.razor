@page "/sales"
@layout EmptyLayout
<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebar1Expanded = !sidebar1Expanded)" />
            <RadzenLabel Text="Header" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebar1Expanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" />
            <RadzenPanelMenuItem Text="Users" Icon="account_box" />
        </RadzenPanelMenu>
        <div class="rz-p-4">
            Sidebar
        </div>
    </RadzenSidebar>
    <RadzenBody>
        <div class="rz-p-4">
            <RadzenButton>
                <RadzenCard Class="rz-my-12 rz-mx-auto" Style="max-width: 420px; border-style:none">
                    <RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-p-4">
                        <RadzenImage Path="@product.Photo" Style="width: 100px; height: 100px; bproduct-radius: 50%;" />
                        <RadzenStack Gap="0">
                            <RadzenText TextStyle="TextStyle.Overline" class="rz-display-flex rz-mt-2 rz-my-0">Ürün Adı</RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1"><b>@(product.ProductName)</b></RadzenText>
                            <RadzenText TextStyle="TextStyle.Body1" class="rz-color-on-primary-light"><b>@String.Format(new System.Globalization.CultureInfo("tr-TR"), "{0:C}", product.Barcode)</b></RadzenText>
                        </RadzenStack>
                    </RadzenStack>
                </RadzenCard>
            </RadzenButton>
        </div>
    </RadzenBody>
    <RadzenFooter>
        Footer
    </RadzenFooter>
</RadzenLayout>

@code {
    bool sidebar1Expanded = true;
    ProductDTO product = new ProductDTO();
    List<ProductDTO> Products = new List<ProductDTO>();
    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public ModalManager ModalManager { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }
    protected override async Task OnInitializedAsync()
    {
        string token = await localStorageService.GetItemAsStringAsync("token");
        Products = await HttpClient.GetServiceResponseAsync<List<ProductDTO>>("api/Product/Products/", token, true);
        product = Products.FirstOrDefault();
    }
}
