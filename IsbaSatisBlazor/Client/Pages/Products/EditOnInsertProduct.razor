@page "/products/add"
@page "/products/edit/{ProductId:guid}"
@using IsbaSatisBlazor.Shared.Validators;
@using Morris.Blazor.FluentValidation;
@using Morris.Blazor.Validation
<EditForm Model="@productModel" OnValidSubmit="SubmitForm">
    <Morris.Blazor.Validation.Validate ValidationProperties=@(ValidationProperties.Set.FluentValidator<ProductValidator>()) OnTransformModel=OnTransformModel />
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenStack>
            <RadzenFieldset Text="Ürün Ekleme Sayfası">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Grubu" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="productModel.ProductGroupId" AllowClear="true" Placeholder="seçim yapınız" Data="@ProductGroupList" Style="width: 100%;" TextProperty="GroupName" ValueProperty="Id" Name="Id"></RadzenDropDown>
                            <ValidationMessage For="@(() => productModel.ProductGroupId)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Ürün Adı" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Style="width: 100%;" @bind-Value="productModel.ProductName" Name="ProductName" />
                            <ValidationMessage For="@(() => productModel.ProductName)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Barkodu" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Style="width: 100%;" @bind-Value="productModel.Barcode" Name="Barcode" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Fotoğraf" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenFileInput @bind-Value=@productModel.Photo @bind-FileName=@fileName @bind-FileSize=@fileSize TValue="string" class="w-100"
                                             Change=@(args => OnChange(args, "FileInput")) Error=@(args => OnError(args, "FileInput")) />
                        </RadzenColumn>
                    </RadzenRow>
                    @*                     <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Expiry Date" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                    <RadzenDatePicker Style="width: 100%;" Name="ExpiryDate" @bind-Value="order.ExpiryDate" />
                    </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenColumn Size="12" SizeMD="4">
                    <RadzenLabel Text="Cardholder" />
                    </RadzenColumn>
                    <RadzenColumn Size="12" SizeMD="8">
                    <RadzenTextBox Style="width: 100%;" Name="CardHolder" />
                    </RadzenColumn>
                    </RadzenRow> *@
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>
    </RadzenColumn>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="@addOrUpdate" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Geri Dön" Click="@goBackGroupList" />
    </RadzenStack>
</EditForm>
@if (addOrUpdate == "Güncelle")
{
    //Ek malzemeler tablosu
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Ek Malzeme Ekle" Click="@InsertRowSupp" Disabled=@(supplementaryMeterialToInsert != null || supplementaryMeterialToUpdate != null) />
    <RadzenDataGrid @ref="supplementaryMaterialsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@supplementaryMaterialList" TItem="SupplementaryMaterialDTO" RowUpdate="@OnUpdateRowSupp" RowCreate="@OnCreateRowSupp" Sort="@ResetSupp" Page="@ResetSupp" Filter="@ResetSupp" FilterMode="FilterMode.Simple" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="SupplementaryMaterialDTO" Context="SupplementaryMaterialDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="SupplementaryMaterialDTO">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRowSuppp(SupplementaryMaterialDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowSupp(SupplementaryMaterialDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="SupplementaryMaterialDTO">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowSupp(SupplementaryMaterialDTO))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEditSupp(SupplementaryMaterialDTO))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowSupp(SupplementaryMaterialDTO))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SupplementaryMaterialDTO" Property="Id" Title="Id" Width="120px" />
            <RadzenDataGridColumn TItem="SupplementaryMaterialDTO" Property="SupplementaryMaterialName" Title="Ek Malzeme Adı">
                <EditTemplate Context="SupplementaryMaterialDTO">
                    <RadzenTextBox @bind-Value="SupplementaryMaterialDTO.SupplementaryMaterialName" Style="width:100%; display: block" Name="Adı" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SupplementaryMaterialDTO" Property="Price" Title="Fiyat">
                <EditTemplate Context="SupplementaryMaterialDTO">
                    <RadzenNumeric @bind-Value="SupplementaryMaterialDTO.Price" Style="width:100%; display: block" Name="Fiyat" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>

    //Porsiyonlar Tablosu
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Porsiyon Ekle" Click="@InsertRow" Disabled=@(portionToInsert != null || portionToUpdate != null) />
    <RadzenDataGrid @ref="portionsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@portionList" TItem="PortionDTO" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset" FilterMode="FilterMode.Simple" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="PortionDTO" Context="PortionDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="PortionDTO">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(PortionDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(PortionDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="Portion">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(Portion))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(Portion))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(Portion))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PortionDTO" Property="Id" Title="Id" Width="120px" />
            <RadzenDataGridColumn TItem="PortionDTO" Property="Name" Title="Porsiyon Adı">
                <EditTemplate Context="PortionDTO">
                    <RadzenTextBox @bind-Value="PortionDTO.Name" Style="width:100%; display: block" Name="Adı" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PortionDTO" Property="Price" Title="Fiyat">
                <EditTemplate Context="PortionDTO">
                    <RadzenNumeric @bind-Value="PortionDTO.Price" Style="width:100%; display: block" Name="Fiyat" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PortionDTO" Property="SupplementaryMaterialMultiplier" Title="Ek malzeme Çarpanı">
                <EditTemplate Context="PortionDTO">
                    <RadzenNumeric @bind-Value="PortionDTO.SupplementaryMaterialMultiplier" Style="width:100%; display: block" Name="Fiyat" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PortionDTO" Property="GroupName" Title="Birim">
                <EditTemplate Context="PortionDTO">
                    <RadzenDropDown @bind-Value="PortionDTO.UnitId" Data="@UnitList" TextProperty="GroupName" ValueProperty="Id" Style="width:100%; display: block;" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>

    //Notlar Tablosu
    <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Not Ekle" Click="@InsertRowNote" Disabled=@(noteToInsert != null || noteToUpdate != null) />
    <RadzenDataGrid @ref="productNotesGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                    Data="@productNoteList" TItem="ProductNoteDTO" RowUpdate="@OnUpdateRowNote" RowCreate="@OnCreateRowNote" Sort="@ResetNote" Page="@ResetNote" Filter="@ResetNote" FilterMode="FilterMode.Simple" ColumnWidth="200px">
        <Columns>
            <RadzenDataGridColumn TItem="ProductNoteDTO" Context="ProductNoteDTO" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="ProductNoteDTO">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRowNote(ProductNoteDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowNote(ProductNoteDTO))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="ProductNoteDTO">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRowNote(ProductNoteDTO))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEditNote(ProductNoteDTO))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowNote(ProductNoteDTO))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="ProductNoteDTO" Property="Id" Title="Id" Width="120px" />
            <RadzenDataGridColumn TItem="ProductNoteDTO" Property="Note" Title="Not">
                <EditTemplate Context="ProductNoteDTO">
                    <RadzenTextBox @bind-Value="ProductNoteDTO.Note" Style="width:100%; display: block" Name="Adı" />
                    @* <RadzenRequiredValidator Text="ShipName is required" Component="ShipName" Popup="true" /> *@
                </EditTemplate>
            </RadzenDataGridColumn>


        </Columns>
    </RadzenDataGrid>




}


@code {
    [Parameter]
    public Guid ProductId { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public ModalManager ModalManager { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }


    string fileName;
    long? fileSize;
    private ProductDTO productModel = new ProductDTO();
    private PortionDTO portionModel = new PortionDTO();
    private ProductNoteDTO productNoteModel = new ProductNoteDTO();
    private SupplementaryMaterialDTO supplementaryMaterialModel = new SupplementaryMaterialDTO();
    protected IEnumerable<ProductGroupDTO> ProductGroupList;
    protected IEnumerable<UnitDTO> UnitList;
    RadzenDataGrid<PortionDTO> portionsGrid;
    RadzenDataGrid<ProductNoteDTO> productNotesGrid;
    RadzenDataGrid<SupplementaryMaterialDTO> supplementaryMaterialsGrid;
    protected IEnumerable<PortionDTO> portionList;
    protected IEnumerable<ProductNoteDTO> productNoteList;
    protected IEnumerable<SupplementaryMaterialDTO> supplementaryMaterialList;
    private string pageTitle = "Yeni Ürün Ekle";
    private string addOrUpdate = "Kaydet";

    PortionDTO portionToInsert;
    PortionDTO portionToUpdate;
    ProductNoteDTO noteToInsert;
    ProductNoteDTO noteToUpdate;
    SupplementaryMaterialDTO supplementaryMeterialToInsert;
    SupplementaryMaterialDTO supplementaryMeterialToUpdate;
    void OnChange(string value, string name)
    {
        // console.Log($"{name} value changed");
    }
    void OnError(UploadErrorEventArgs args, string name)
    {
        // console.Log($"{args.Message}");
    }
    void Reset()
    {
        portionToInsert = null;
        portionToUpdate = null;
    }
    void ResetSupp()
    {
        supplementaryMeterialToInsert = null;
        supplementaryMeterialToUpdate = null;
    }
    void ResetNote()
    {
        noteToInsert = null;
        noteToUpdate = null;
    }

    async Task EditRow(PortionDTO portion)
    {
        portionToUpdate = portion;
        await portionsGrid.EditRow(portion);
    }
    async Task EditRowSuppp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        supplementaryMeterialToUpdate = supplementaryMaterial;
        await supplementaryMaterialsGrid.EditRow(supplementaryMaterial);
    }
    async Task EditRowNote(ProductNoteDTO productNote)
    {
        noteToUpdate = productNote;
        await productNotesGrid.EditRow(productNote);
    }


    async void OnUpdateRow(PortionDTO portion)
    {
        try
        {
            Reset();
            portion.ProductId = ProductId;
            portion.UpdatedDate = DateTime.Now;
            portion.UpdatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            portionModel = await HttpClient.PostGetServiceResponseAsync<PortionDTO, PortionDTO>("api/portion/update", portion, token, true);
            await InvokeAsync(StateHasChanged);
        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

    }
    async void OnUpdateRowSupp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        try
        {
            ResetSupp();
            supplementaryMaterial.ProductId = ProductId;
            supplementaryMaterial.UpdatedDate = DateTime.Now;
            supplementaryMaterial.UpdatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            supplementaryMaterialModel = await HttpClient.PostGetServiceResponseAsync<SupplementaryMaterialDTO, SupplementaryMaterialDTO>("api/SupplementaryMaterial/update", supplementaryMaterial, token, true);
            await InvokeAsync(StateHasChanged);
        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

    }
    async void OnUpdateRowNote(ProductNoteDTO productNote)
    {
        try
        {
            ResetNote();
            productNote.ProductId = ProductId;
            productNote.UpdatedDate = DateTime.Now;
            productNote.UpdatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            productNoteModel = await HttpClient.PostGetServiceResponseAsync<ProductNoteDTO, ProductNoteDTO>("api/ProductNote/update", productNote, token, true);
            await productNotesGrid.Reload();
            await InvokeAsync(StateHasChanged);

        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

    }


    async Task SaveRow(PortionDTO portion)
    {
        await portionsGrid.UpdateRow(portion);
        portionToInsert = null;
        await InvokeAsync(StateHasChanged);
    }
    async Task SaveRowSupp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        await supplementaryMaterialsGrid.UpdateRow(supplementaryMaterial);
        supplementaryMeterialToInsert = null;
        await InvokeAsync(StateHasChanged);
    }
    async Task SaveRowNote(ProductNoteDTO productNote)
    {
        await productNotesGrid.UpdateRow(productNote);
        noteToInsert = null;
        await productNotesGrid.Reload();
        await InvokeAsync(StateHasChanged);

    }


    void CancelEdit(PortionDTO portion)
    {
        Reset();

        portionsGrid.CancelEditRow(portion);
    }
    void CancelEditSupp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        ResetSupp();

        supplementaryMaterialsGrid.CancelEditRow(supplementaryMaterial);
    }
    void CancelEditNote(ProductNoteDTO productNote)
    {
        ResetNote();

        productNotesGrid.CancelEditRow(productNote);
    }


    async Task DeleteRow(PortionDTO portion)
    {
        Reset();


        string token = await localStorageService.GetItemAsStringAsync("token");
        bool deleted = await HttpClient.PostGetServiceResponseAsync<bool, Guid>("api/Portion/Delete", portion.Id, token, true);
        portionList = await HttpClient.GetServiceResponseAsync<List<PortionDTO>>("api/portion/PortionsById/" + ProductId, token, true);
        await portionsGrid.Reload();
        await InvokeAsync(StateHasChanged);
    }
    async Task DeleteRowSupp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        ResetSupp();


        string token = await localStorageService.GetItemAsStringAsync("token");
        bool deleted = await HttpClient.PostGetServiceResponseAsync<bool, Guid>("api/SupplementaryMaterial/Delete", supplementaryMaterial.Id, token, true);
        supplementaryMaterialList = await HttpClient.GetServiceResponseAsync<List<SupplementaryMaterialDTO>>("api/SupplementaryMaterial/SupplementaryMaterialsById/" + ProductId, token, true);
        await supplementaryMaterialsGrid.Reload();
        await InvokeAsync(StateHasChanged);
    }
    async Task DeleteRowNote(ProductNoteDTO productNote)
    {
        ResetNote();


        string token = await localStorageService.GetItemAsStringAsync("token");
        bool deleted = await HttpClient.PostGetServiceResponseAsync<bool, Guid>("api/SupplementaryMaterial/Delete", productNote.Id, token, true);
        await productNotesGrid.Reload();
        productNoteList = await HttpClient.GetServiceResponseAsync<List<ProductNoteDTO>>("api/ProductNote/ProductNotesById/" + ProductId, token, true);
        await InvokeAsync(StateHasChanged);

    }


    async Task InsertRow()
    {
        portionToInsert = new PortionDTO();
        await portionsGrid.InsertRow(portionToInsert);
        await InvokeAsync(StateHasChanged);
    }
    async Task InsertRowSupp()
    {
        supplementaryMeterialToInsert = new SupplementaryMaterialDTO();
        await supplementaryMaterialsGrid.InsertRow(supplementaryMeterialToInsert);
        await InvokeAsync(StateHasChanged);
    }
    async Task InsertRowNote()
    {
        noteToInsert = new ProductNoteDTO();
        await productNotesGrid.InsertRow(noteToInsert);
        await InvokeAsync(StateHasChanged);

    }



    async void OnCreateRow(PortionDTO portion)
    {
        try
        {
            portion.ProductId = ProductId;
            portion.CreateDate = DateTime.Now;
            portion.CreatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            portionModel = await HttpClient.PostGetServiceResponseAsync<PortionDTO, PortionDTO>("api/portion/create", portion, token, true);
            portionToInsert = null;
            portionList = await HttpClient.GetServiceResponseAsync<List<PortionDTO>>("api/portion/PortionsById/" + ProductId, token, true);
            await InvokeAsync(StateHasChanged);
        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

        // NavigationManager.NavigateTo("/products/edit/"+ProductId);
    }
    async void OnCreateRowSupp(SupplementaryMaterialDTO supplementaryMaterial)
    {
        try
        {
            supplementaryMaterial.ProductId = ProductId;
            supplementaryMaterial.CreateDate = DateTime.Now;
            supplementaryMaterial.CreatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            supplementaryMaterialModel = await HttpClient.PostGetServiceResponseAsync<SupplementaryMaterialDTO, SupplementaryMaterialDTO>("api/supplementarymaterial/create", supplementaryMaterial, token, true);
            portionToInsert = null;
            supplementaryMaterialList = await HttpClient.GetServiceResponseAsync<List<SupplementaryMaterialDTO>>("api/SupplementaryMaterial/SupplementaryMaterialsById/" + ProductId, token, true);
            await InvokeAsync(StateHasChanged);
        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

        // NavigationManager.NavigateTo("/products/edit/"+ProductId);
    }
    async void OnCreateRowNote(ProductNoteDTO productNote)
    {
        try
        {
            productNote.ProductId = ProductId;
            productNote.CreateDate = DateTime.Now;
            productNote.CreatedUser = await localStorageService.GetItemAsStringAsync("email");
            string token = await localStorageService.GetItemAsStringAsync("token");
            productNoteModel = await HttpClient.PostGetServiceResponseAsync<ProductNoteDTO, ProductNoteDTO>("api/productnote/create", productNote, token, true);
            noteToInsert = null;
            productNoteList = await HttpClient.GetServiceResponseAsync<List<ProductNoteDTO>>("api/ProductNote/ProductNotesById/" + ProductId, token, true);
            await InvokeAsync(StateHasChanged);
            await productNotesGrid.Reload();
          

        }
        catch (ApiException ex)
        {

            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }

        // NavigationManager.NavigateTo("/products/edit/"+ProductId);
    }


    void goBackGroupList()
    {
        NavigationManager.NavigateTo("/Unitlist");
    }

    protected async override Task OnInitializedAsync()
    {
        string token = await localStorageService.GetItemAsStringAsync("token");
        UnitList = await HttpClient.GetServiceResponseAsync<List<UnitDTO>>("api/unit/units", token, true);
        ProductGroupList = await HttpClient.GetServiceResponseAsync<List<ProductGroupDTO>>("api/productgroup/productgroups", token, true);
        if (ProductId != null && ProductId != Guid.Empty)
        {
            try
            {
                pageTitle = "Ürün Güncelle";
                addOrUpdate = "Güncelle";
                portionList = await HttpClient.GetServiceResponseAsync<List<PortionDTO>>("api/portion/PortionsById/" + ProductId, token, true);
                productNoteList = await HttpClient.GetServiceResponseAsync<List<ProductNoteDTO>>("api/ProductNote/ProductNotesById/" + ProductId, token, true);
                supplementaryMaterialList = await HttpClient.GetServiceResponseAsync<List<SupplementaryMaterialDTO>>("api/SupplementaryMaterial/SupplementaryMaterialsById/" + ProductId, token, true);
                productModel = await HttpClient.GetServiceResponseAsync<ProductDTO>("api/product/ProductById/" + ProductId, token, true);
            }
            catch (ApiException ex)
            {
                await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
            }
        }
    }

    async Task editOrUpdate(ProductDTO productDTO)
    {

        try
        {

            String url = "api/Product/create";
            productModel = productDTO;
            // Update
            if (ProductId != null && ProductId != Guid.Empty)
            {
                url = "api/product/update";
                productModel.UpdatedDate = DateTime.Now;
                productModel.UpdatedUser = await localStorageService.GetItemAsStringAsync("email");
            }
            else
            {
                productModel.CreateDate = DateTime.Now;
                productModel.CreatedUser = await localStorageService.GetItemAsStringAsync("email");
            }
            string token = await localStorageService.GetItemAsStringAsync("token");

            productModel = await HttpClient.PostGetServiceResponseAsync<ProductDTO, ProductDTO>(url, productModel, token, true);

            NavigationManager.NavigateTo("/productlist");
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }




    }
    async Task SubmitForm(EditContext editContext)
    {
        if (editContext.Validate())
        {
            await editOrUpdate((ProductDTO)editContext.Model);
        }
    }
    private object OnTransformModel(object model)
    {
        // Confirm that the model is of the expected type
        // Do transformations here
        // return the transformed model
        return model;
    }
}
